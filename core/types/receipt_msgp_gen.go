package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/ledgerwatch/turbo-geth/common"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Log) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			err = z.Address.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "1":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([]common.Hash, zb0002)
			}
			for za0001 := range z.Topics {
				err = z.Topics[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0001)
					return
				}
			}
		case "2":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Log) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "0"
	err = en.Append(0x83, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = z.Address.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Topics)))
	if err != nil {
		err = msgp.WrapError(err, "Topics")
		return
	}
	for za0001 := range z.Topics {
		err = z.Topics[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Topics", za0001)
			return
		}
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Log) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	o, err = z.Address.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Topics)))
	for za0001 := range z.Topics {
		o, err = z.Topics[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Topics", za0001)
			return
		}
	}
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Log) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			bts, err = z.Address.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "1":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([]common.Hash, zb0002)
			}
			for za0001 := range z.Topics {
				bts, err = z.Topics[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0001)
					return
				}
			}
		case "2":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Log) Msgsize() (s int) {
	s = 1 + 2 + z.Address.Msgsize() + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Topics {
		s += z.Topics[za0001].Msgsize()
	}
	s += 2 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Receipt) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.PostState, err = dc.ReadBytes(z.PostState)
			if err != nil {
				err = msgp.WrapError(err, "PostState")
				return
			}
		case "1":
			z.Status, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "2":
			z.CumulativeGasUsed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CumulativeGasUsed")
				return
			}
		case "3":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*Log, zb0002)
			}
			for za0001 := range z.Logs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(Log)
					}
					err = z.Logs[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
				}
			}
		case "4":
			err = z.ContractAddress.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Receipt) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "0"
	err = en.Append(0x85, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PostState)
	if err != nil {
		err = msgp.WrapError(err, "PostState")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CumulativeGasUsed)
	if err != nil {
		err = msgp.WrapError(err, "CumulativeGasUsed")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Logs)))
	if err != nil {
		err = msgp.WrapError(err, "Logs")
		return
	}
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Logs[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001)
				return
			}
		}
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = z.ContractAddress.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Receipt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "0"
	o = append(o, 0x85, 0xa1, 0x30)
	o = msgp.AppendBytes(o, z.PostState)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint64(o, z.Status)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendUint64(o, z.CumulativeGasUsed)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Logs)))
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Logs[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001)
				return
			}
		}
	}
	// string "4"
	o = append(o, 0xa1, 0x34)
	o, err = z.ContractAddress.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Receipt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.PostState, bts, err = msgp.ReadBytesBytes(bts, z.PostState)
			if err != nil {
				err = msgp.WrapError(err, "PostState")
				return
			}
		case "1":
			z.Status, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "2":
			z.CumulativeGasUsed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CumulativeGasUsed")
				return
			}
		case "3":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*Log, zb0002)
			}
			for za0001 := range z.Logs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(Log)
					}
					bts, err = z.Logs[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
				}
			}
		case "4":
			bts, err = z.ContractAddress.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Receipt) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len(z.PostState) + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Logs[za0001].Msgsize()
		}
	}
	s += 2 + z.ContractAddress.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReceiptForStorage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.PostState, err = dc.ReadBytes(z.PostState)
			if err != nil {
				err = msgp.WrapError(err, "PostState")
				return
			}
		case "1":
			z.Status, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "2":
			z.CumulativeGasUsed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CumulativeGasUsed")
				return
			}
		case "3":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*Log, zb0002)
			}
			for za0001 := range z.Logs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(Log)
					}
					err = z.Logs[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
				}
			}
		case "4":
			err = z.ContractAddress.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ReceiptForStorage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "0"
	err = en.Append(0x85, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PostState)
	if err != nil {
		err = msgp.WrapError(err, "PostState")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CumulativeGasUsed)
	if err != nil {
		err = msgp.WrapError(err, "CumulativeGasUsed")
		return
	}
	// write "3"
	err = en.Append(0xa1, 0x33)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Logs)))
	if err != nil {
		err = msgp.WrapError(err, "Logs")
		return
	}
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Logs[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001)
				return
			}
		}
	}
	// write "4"
	err = en.Append(0xa1, 0x34)
	if err != nil {
		return
	}
	err = z.ContractAddress.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ReceiptForStorage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "0"
	o = append(o, 0x85, 0xa1, 0x30)
	o = msgp.AppendBytes(o, z.PostState)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint64(o, z.Status)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendUint64(o, z.CumulativeGasUsed)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Logs)))
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Logs[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001)
				return
			}
		}
	}
	// string "4"
	o = append(o, 0xa1, 0x34)
	o, err = z.ContractAddress.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReceiptForStorage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.PostState, bts, err = msgp.ReadBytesBytes(bts, z.PostState)
			if err != nil {
				err = msgp.WrapError(err, "PostState")
				return
			}
		case "1":
			z.Status, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "2":
			z.CumulativeGasUsed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CumulativeGasUsed")
				return
			}
		case "3":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*Log, zb0002)
			}
			for za0001 := range z.Logs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(Log)
					}
					bts, err = z.Logs[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
				}
			}
		case "4":
			bts, err = z.ContractAddress.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ReceiptForStorage) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len(z.PostState) + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Logs[za0001].Msgsize()
		}
	}
	s += 2 + z.ContractAddress.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReceiptForStorages) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ReceiptForStorages, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(ReceiptForStorage)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReceiptForStorages) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReceiptForStorages) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReceiptForStorages) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ReceiptForStorages, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(ReceiptForStorage)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReceiptForStorages) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Receipts) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Receipts, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(Receipt)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Receipts) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Receipts) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Receipts) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Receipts, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(Receipt)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Receipts) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}
