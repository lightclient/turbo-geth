// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package types

import (
	"errors"
	pkg1_common "github.com/ledgerwatch/turbo-geth/common"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_big "math/big"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82 = 1
	codecSelferCcRAW2  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2     = 10
	codecSelferValueTypeMap2       = 9
	codecSelferValueTypeString2    = 6
	codecSelferValueTypeInt2       = 2
	codecSelferValueTypeUint2      = 3
	codecSelferValueTypeFloat2     = 4
	codecSelferValueTypeNil2       = 1
	codecSelferBitsize2            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil2 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer2 struct{}

func codecSelfer2False() bool { return false }

func init() {
	if codec1978.GenVersion != 17 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 17, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_common.Address
		var _ pkg2_big.Int
	}
}

func (x *Receipt) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(x)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(4)
				z.EncWriteArrayElem()
				if x.PostState == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.PostState))
				} // end block: if x.PostState slice == nil
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.Status))
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.CumulativeGasUsed))
				z.EncWriteArrayElem()
				if x.Logs == nil {
					r.EncodeNil()
				} else {
					h.encSlicePtrtoLog(([]*Log)(x.Logs), e)
				} // end block: if x.Logs slice == nil
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(4)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"1\"")
				} else {
					r.EncodeString(`1`)
				}
				z.EncWriteMapElemValue()
				if x.PostState == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.PostState))
				} // end block: if x.PostState slice == nil
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"2\"")
				} else {
					r.EncodeString(`2`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Status))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"3\"")
				} else {
					r.EncodeString(`3`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.CumulativeGasUsed))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"4\"")
				} else {
					r.EncodeString(`4`)
				}
				z.EncWriteMapElemValue()
				if x.Logs == nil {
					r.EncodeNil()
				} else {
					h.encSlicePtrtoLog(([]*Log)(x.Logs), e)
				} // end block: if x.Logs slice == nil
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *Receipt) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeNil2 {
			*(x) = Receipt{}
		} else if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
			z.DecReadMapEnd()
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 != 0 {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
			z.DecReadArrayEnd()
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *Receipt) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "1":
			x.PostState = r.DecodeBytes(([]byte)(x.PostState), false)
		case "2":
			x.Status = (uint64)(r.DecodeUint64())
		case "3":
			x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
		case "4":
			h.decSlicePtrtoLog((*[]*Log)(&x.Logs), d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Receipt) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.PostState = r.DecodeBytes(([]byte)(x.PostState), false)
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Status = (uint64)(r.DecodeUint64())
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoLog((*[]*Log)(&x.Logs), d)
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = z.DecCheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
}

func (x *storedReceiptRLP) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			if x.PostStateOrStatus == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostStateOrStatus))
			} // end block: if x.PostStateOrStatus slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteArrayElem()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLogForStorage(([]*LogForStorage)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"PostStateOrStatus\"")
			} else {
				r.EncodeString(`PostStateOrStatus`)
			}
			z.EncWriteMapElemValue()
			if x.PostStateOrStatus == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostStateOrStatus))
			} // end block: if x.PostStateOrStatus slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"CumulativeGasUsed\"")
			} else {
				r.EncodeString(`CumulativeGasUsed`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Logs\"")
			} else {
				r.EncodeString(`Logs`)
			}
			z.EncWriteMapElemValue()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLogForStorage(([]*LogForStorage)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *storedReceiptRLP) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2 {
		*(x) = storedReceiptRLP{}
	} else if yyct2 == codecSelferValueTypeMap2 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
	}
}

func (x *storedReceiptRLP) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "PostStateOrStatus":
			x.PostStateOrStatus = r.DecodeBytes(([]byte)(x.PostStateOrStatus), false)
		case "CumulativeGasUsed":
			x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
		case "Logs":
			h.decSlicePtrtoLogForStorage((*[]*LogForStorage)(&x.Logs), d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *storedReceiptRLP) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.PostStateOrStatus = r.DecodeBytes(([]byte)(x.PostStateOrStatus), false)
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoLogForStorage((*[]*LogForStorage)(&x.Logs), d)
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = z.DecCheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
}

func (x *v4StoredReceiptRLP) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(6)
			z.EncWriteArrayElem()
			if x.PostStateOrStatus == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostStateOrStatus))
			} // end block: if x.PostStateOrStatus slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteArrayElem()
			yy11 := &x.TxHash
			if !z.EncBinary() {
				z.EncTextMarshal(yy11)
			} else {
				h.enccommon_Hash((*pkg1_common.Hash)(yy11), e)
			}
			z.EncWriteArrayElem()
			yy13 := &x.ContractAddress
			if !z.EncBinary() {
				z.EncTextMarshal(yy13)
			} else {
				h.enccommon_Address((*pkg1_common.Address)(yy13), e)
			}
			z.EncWriteArrayElem()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLogForStorage(([]*LogForStorage)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.GasUsed))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(6)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"PostStateOrStatus\"")
			} else {
				r.EncodeString(`PostStateOrStatus`)
			}
			z.EncWriteMapElemValue()
			if x.PostStateOrStatus == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostStateOrStatus))
			} // end block: if x.PostStateOrStatus slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"CumulativeGasUsed\"")
			} else {
				r.EncodeString(`CumulativeGasUsed`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"TxHash\"")
			} else {
				r.EncodeString(`TxHash`)
			}
			z.EncWriteMapElemValue()
			yy19 := &x.TxHash
			if !z.EncBinary() {
				z.EncTextMarshal(yy19)
			} else {
				h.enccommon_Hash((*pkg1_common.Hash)(yy19), e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ContractAddress\"")
			} else {
				r.EncodeString(`ContractAddress`)
			}
			z.EncWriteMapElemValue()
			yy21 := &x.ContractAddress
			if !z.EncBinary() {
				z.EncTextMarshal(yy21)
			} else {
				h.enccommon_Address((*pkg1_common.Address)(yy21), e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Logs\"")
			} else {
				r.EncodeString(`Logs`)
			}
			z.EncWriteMapElemValue()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLogForStorage(([]*LogForStorage)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"GasUsed\"")
			} else {
				r.EncodeString(`GasUsed`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.GasUsed))
			z.EncWriteMapEnd()
		}
	}
}

func (x *v4StoredReceiptRLP) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2 {
		*(x) = v4StoredReceiptRLP{}
	} else if yyct2 == codecSelferValueTypeMap2 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
	}
}

func (x *v4StoredReceiptRLP) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "PostStateOrStatus":
			x.PostStateOrStatus = r.DecodeBytes(([]byte)(x.PostStateOrStatus), false)
		case "CumulativeGasUsed":
			x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
		case "TxHash":
			if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.TxHash)
			} else {
				h.deccommon_Hash((*pkg1_common.Hash)(&x.TxHash), d)
			}
		case "ContractAddress":
			if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ContractAddress)
			} else {
				h.deccommon_Address((*pkg1_common.Address)(&x.ContractAddress), d)
			}
		case "Logs":
			h.decSlicePtrtoLogForStorage((*[]*LogForStorage)(&x.Logs), d)
		case "GasUsed":
			x.GasUsed = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *v4StoredReceiptRLP) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.PostStateOrStatus = r.DecodeBytes(([]byte)(x.PostStateOrStatus), false)
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.TxHash)
	} else {
		h.deccommon_Hash((*pkg1_common.Hash)(&x.TxHash), d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ContractAddress)
	} else {
		h.deccommon_Address((*pkg1_common.Address)(&x.ContractAddress), d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoLogForStorage((*[]*LogForStorage)(&x.Logs), d)
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.GasUsed = (uint64)(r.DecodeUint64())
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = z.DecCheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
}

func (x *v3StoredReceiptRLP) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(5)
			z.EncWriteArrayElem()
			if x.PostStateOrStatus == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostStateOrStatus))
			} // end block: if x.PostStateOrStatus slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteArrayElem()
			yy10 := &x.ContractAddress
			if !z.EncBinary() {
				z.EncTextMarshal(yy10)
			} else {
				h.enccommon_Address((*pkg1_common.Address)(yy10), e)
			}
			z.EncWriteArrayElem()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLogForStorage(([]*LogForStorage)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.GasUsed))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(5)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"PostStateOrStatus\"")
			} else {
				r.EncodeString(`PostStateOrStatus`)
			}
			z.EncWriteMapElemValue()
			if x.PostStateOrStatus == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostStateOrStatus))
			} // end block: if x.PostStateOrStatus slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"CumulativeGasUsed\"")
			} else {
				r.EncodeString(`CumulativeGasUsed`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ContractAddress\"")
			} else {
				r.EncodeString(`ContractAddress`)
			}
			z.EncWriteMapElemValue()
			yy16 := &x.ContractAddress
			if !z.EncBinary() {
				z.EncTextMarshal(yy16)
			} else {
				h.enccommon_Address((*pkg1_common.Address)(yy16), e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Logs\"")
			} else {
				r.EncodeString(`Logs`)
			}
			z.EncWriteMapElemValue()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLogForStorage(([]*LogForStorage)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"GasUsed\"")
			} else {
				r.EncodeString(`GasUsed`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.GasUsed))
			z.EncWriteMapEnd()
		}
	}
}

func (x *v3StoredReceiptRLP) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2 {
		*(x) = v3StoredReceiptRLP{}
	} else if yyct2 == codecSelferValueTypeMap2 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
	}
}

func (x *v3StoredReceiptRLP) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "PostStateOrStatus":
			x.PostStateOrStatus = r.DecodeBytes(([]byte)(x.PostStateOrStatus), false)
		case "CumulativeGasUsed":
			x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
		case "ContractAddress":
			if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ContractAddress)
			} else {
				h.deccommon_Address((*pkg1_common.Address)(&x.ContractAddress), d)
			}
		case "Logs":
			h.decSlicePtrtoLogForStorage((*[]*LogForStorage)(&x.Logs), d)
		case "GasUsed":
			x.GasUsed = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *v3StoredReceiptRLP) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = z.DecCheckBreak()
	}
	if yyb12 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.PostStateOrStatus = r.DecodeBytes(([]byte)(x.PostStateOrStatus), false)
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = z.DecCheckBreak()
	}
	if yyb12 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = z.DecCheckBreak()
	}
	if yyb12 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ContractAddress)
	} else {
		h.deccommon_Address((*pkg1_common.Address)(&x.ContractAddress), d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = z.DecCheckBreak()
	}
	if yyb12 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoLogForStorage((*[]*LogForStorage)(&x.Logs), d)
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = z.DecCheckBreak()
	}
	if yyb12 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.GasUsed = (uint64)(r.DecodeUint64())
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = z.DecCheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
}

func (x ReceiptsForStorage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encReceiptsForStorage((ReceiptsForStorage)(x), e)
	} // end block: if x slice == nil
}

func (x *ReceiptsForStorage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decReceiptsForStorage((*ReceiptsForStorage)(x), d)
}

func (x *ReceiptForStorage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(4)
			z.EncWriteArrayElem()
			if x.PostState == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostState))
			} // end block: if x.PostState slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Status))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteArrayElem()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLog(([]*Log)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(4)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"1\"")
			} else {
				r.EncodeString(`1`)
			}
			z.EncWriteMapElemValue()
			if x.PostState == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostState))
			} // end block: if x.PostState slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"2\"")
			} else {
				r.EncodeString(`2`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Status))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"3\"")
			} else {
				r.EncodeString(`3`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"4\"")
			} else {
				r.EncodeString(`4`)
			}
			z.EncWriteMapElemValue()
			if x.Logs == nil {
				r.EncodeNil()
			} else {
				h.encSlicePtrtoLog(([]*Log)(x.Logs), e)
			} // end block: if x.Logs slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *ReceiptForStorage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil2 {
		*(x) = ReceiptForStorage{}
	} else if yyct2 == codecSelferValueTypeMap2 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray2 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
	}
}

func (x *ReceiptForStorage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "1":
			x.PostState = r.DecodeBytes(([]byte)(x.PostState), false)
		case "2":
			x.Status = (uint64)(r.DecodeUint64())
		case "3":
			x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
		case "4":
			h.decSlicePtrtoLog((*[]*Log)(&x.Logs), d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *ReceiptForStorage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.PostState = r.DecodeBytes(([]byte)(x.PostState), false)
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Status = (uint64)(r.DecodeUint64())
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicePtrtoLog((*[]*Log)(&x.Logs), d)
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = z.DecCheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
}

func (x Receipts) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encReceipts((Receipts)(x), e)
	} // end block: if x slice == nil
}

func (x *Receipts) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decReceipts((*Receipts)(x), d)
}

func (x codecSelfer2) encSlicePtrtoLog(v []*Log, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(yyv1)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decSlicePtrtoLog(v *[]*Log, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Log{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Log, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Log, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Log)
					}
					if !z.DecBinary() && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv1[yyj1])
					} else {
						z.DecFallback(yyv1[yyj1], false)
					}
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Log, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) encSlicePtrtoLogForStorage(v []*LogForStorage, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			z.EncFallback(yyv1)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decSlicePtrtoLogForStorage(v *[]*LogForStorage, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*LogForStorage{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*LogForStorage, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*LogForStorage, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(LogForStorage)
					}
					z.DecFallback(yyv1[yyj1], false)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*LogForStorage, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) enccommon_Hash(v *pkg1_common.Hash, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[32]byte)(v))[:])
}

func (x codecSelfer2) deccommon_Hash(v *pkg1_common.Hash, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:], true)
}

func (x codecSelfer2) enccommon_Address(v *pkg1_common.Address, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[20]byte)(v))[:])
}

func (x codecSelfer2) deccommon_Address(v *pkg1_common.Address, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[20]byte)(v))[:], true)
}

func (x codecSelfer2) encReceiptsForStorage(v ReceiptsForStorage, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decReceiptsForStorage(v *ReceiptsForStorage, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ReceiptForStorage{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ReceiptForStorage, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*ReceiptForStorage, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ReceiptForStorage)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*ReceiptForStorage, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) encReceipts(v Receipts, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decReceipts(v *Receipts, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Receipt{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Receipt, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Receipt, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Receipt)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Receipt, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
