package common

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *StorageBucketWriteStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "KeyN":
			{
				var zb0002 float64
				zb0002, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "KeyN")
					return
				}
				z.KeyN = StorageCounter(zb0002)
			}
		case "KeyBytesN":
			{
				var zb0003 float64
				zb0003, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "KeyBytesN")
					return
				}
				z.KeyBytesN = StorageSize(zb0003)
			}
		case "ValueBytesN":
			{
				var zb0004 float64
				zb0004, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "ValueBytesN")
					return
				}
				z.ValueBytesN = StorageSize(zb0004)
			}
		case "TotalPut":
			{
				var zb0005 float64
				zb0005, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "TotalPut")
					return
				}
				z.TotalPut = StorageCounter(zb0005)
			}
		case "TotalDelete":
			{
				var zb0006 float64
				zb0006, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "TotalDelete")
					return
				}
				z.TotalDelete = StorageCounter(zb0006)
			}
		case "TotalBytesPut":
			{
				var zb0007 float64
				zb0007, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "TotalBytesPut")
					return
				}
				z.TotalBytesPut = StorageSize(zb0007)
			}
		case "TotalBytesDelete":
			{
				var zb0008 float64
				zb0008, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "TotalBytesDelete")
					return
				}
				z.TotalBytesDelete = StorageSize(zb0008)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StorageBucketWriteStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "KeyN"
	err = en.Append(0x87, 0xa4, 0x4b, 0x65, 0x79, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.KeyN))
	if err != nil {
		err = msgp.WrapError(err, "KeyN")
		return
	}
	// write "KeyBytesN"
	err = en.Append(0xa9, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.KeyBytesN))
	if err != nil {
		err = msgp.WrapError(err, "KeyBytesN")
		return
	}
	// write "ValueBytesN"
	err = en.Append(0xab, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.ValueBytesN))
	if err != nil {
		err = msgp.WrapError(err, "ValueBytesN")
		return
	}
	// write "TotalPut"
	err = en.Append(0xa8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.TotalPut))
	if err != nil {
		err = msgp.WrapError(err, "TotalPut")
		return
	}
	// write "TotalDelete"
	err = en.Append(0xab, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.TotalDelete))
	if err != nil {
		err = msgp.WrapError(err, "TotalDelete")
		return
	}
	// write "TotalBytesPut"
	err = en.Append(0xad, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.TotalBytesPut))
	if err != nil {
		err = msgp.WrapError(err, "TotalBytesPut")
		return
	}
	// write "TotalBytesDelete"
	err = en.Append(0xb0, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(float64(z.TotalBytesDelete))
	if err != nil {
		err = msgp.WrapError(err, "TotalBytesDelete")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StorageBucketWriteStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "KeyN"
	o = append(o, 0x87, 0xa4, 0x4b, 0x65, 0x79, 0x4e)
	o = msgp.AppendFloat64(o, float64(z.KeyN))
	// string "KeyBytesN"
	o = append(o, 0xa9, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e)
	o = msgp.AppendFloat64(o, float64(z.KeyBytesN))
	// string "ValueBytesN"
	o = append(o, 0xab, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e)
	o = msgp.AppendFloat64(o, float64(z.ValueBytesN))
	// string "TotalPut"
	o = append(o, 0xa8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x74)
	o = msgp.AppendFloat64(o, float64(z.TotalPut))
	// string "TotalDelete"
	o = append(o, 0xab, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	o = msgp.AppendFloat64(o, float64(z.TotalDelete))
	// string "TotalBytesPut"
	o = append(o, 0xad, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x75, 0x74)
	o = msgp.AppendFloat64(o, float64(z.TotalBytesPut))
	// string "TotalBytesDelete"
	o = append(o, 0xb0, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65)
	o = msgp.AppendFloat64(o, float64(z.TotalBytesDelete))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageBucketWriteStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "KeyN":
			{
				var zb0002 float64
				zb0002, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "KeyN")
					return
				}
				z.KeyN = StorageCounter(zb0002)
			}
		case "KeyBytesN":
			{
				var zb0003 float64
				zb0003, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "KeyBytesN")
					return
				}
				z.KeyBytesN = StorageSize(zb0003)
			}
		case "ValueBytesN":
			{
				var zb0004 float64
				zb0004, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ValueBytesN")
					return
				}
				z.ValueBytesN = StorageSize(zb0004)
			}
		case "TotalPut":
			{
				var zb0005 float64
				zb0005, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalPut")
					return
				}
				z.TotalPut = StorageCounter(zb0005)
			}
		case "TotalDelete":
			{
				var zb0006 float64
				zb0006, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalDelete")
					return
				}
				z.TotalDelete = StorageCounter(zb0006)
			}
		case "TotalBytesPut":
			{
				var zb0007 float64
				zb0007, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalBytesPut")
					return
				}
				z.TotalBytesPut = StorageSize(zb0007)
			}
		case "TotalBytesDelete":
			{
				var zb0008 float64
				zb0008, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TotalBytesDelete")
					return
				}
				z.TotalBytesDelete = StorageSize(zb0008)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StorageBucketWriteStats) Msgsize() (s int) {
	s = 1 + 5 + msgp.Float64Size + 10 + msgp.Float64Size + 12 + msgp.Float64Size + 9 + msgp.Float64Size + 12 + msgp.Float64Size + 14 + msgp.Float64Size + 17 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StorageCounter) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 float64
		zb0001, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageCounter(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StorageCounter) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteFloat64(float64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StorageCounter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendFloat64(o, float64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageCounter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 float64
		zb0001, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageCounter(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StorageCounter) Msgsize() (s int) {
	s = msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StorageSize) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 float64
		zb0001, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageSize(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StorageSize) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteFloat64(float64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StorageSize) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendFloat64(o, float64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageSize) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 float64
		zb0001, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageSize(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StorageSize) Msgsize() (s int) {
	s = msgp.Float64Size
	return
}
